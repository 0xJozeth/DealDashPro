// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id    String @id @unique // matches up with the kinde user id
  email String @unique

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  // Define the favorites relationship: a user can have multiple favorite properties
  favorites  Favorites[]
  // Define the offers sent relationship: a user can have multiple offers
  offersSent SentOffers[]

  // Define a unique relation name for the user who created the property
  createdProperties Property[] @relation("PropertyCreatedBy")
  UserId            String?

  // Define a unique relation name for the user who favorited the property
  favoritedProperties Property[] @relation(name: "PropertyFavoritedBy")
  favoritedByUserId   String?
}

model SentOffers {
  id Int @id @default(autoincrement())

  dateSubmitted  DateTime   @default(now()) // Time of offer submission
  offerSubmitted String // Offer price defined as string
  status         EnumStatus // Change this to match your desired data type for status
  cancel         Boolean

  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@index([userId])
  @@index([propertyId])
}



model Property {
  id      Int    @id @default(autoincrement())
  url     String @unique @default(cuid())
  heading String

  imgSrc     String
  imgWidth   Int
  imgHeight  Int
  imgAlt     String
  cn         String
  views      String
  popularity EnumPopularity

  desc        String
  streetView  String
  mapLocation String

  askPrice  String
  arv       String
  address1  String
  address2  String
  city      String
  state     String
  county    String
  zip       String
  beds      Int
  baths     Int
  sqft      Int
  type      String
  parking   String
  yearBuilt Int
  lotSize   Int

  listedAt DateTime @default(now()) // Timestamp when the property was listed
  // Add other properties and relationships as needed

  // Define a relation with a unique name for the user who created the property
  createdBy User?   @relation(name: "PropertyCreatedBy", fields: [userId], references: [id])
  userId    String?

  // Define another relation with a unique name for the user who favorited the property
  favoritedBy       User?        @relation(name: "PropertyFavoritedBy", fields: [favoritedByUserId], references: [id])
  favoritedByUserId String?
  SentOffers        SentOffers[]
  Favorites         Favorites[]

  @@index([userId])
  @@index([favoritedByUserId])
}



model Favorites {
  id               Int       @id @default(autoincrement())
  propertyId       Int
  propertyType     String
  favoriteTags     String
  favoriteCategory EnumFavoriteCategory
  lastVisitedDate  DateTime? @map(name: "last_visited_date")

  user     User     @relation(fields: [userId], references: [id])
  userId   String
  property Property @relation(fields: [propertyId], references: [id])

  @@index([userId])
  @@index([propertyId])
}


enum EnumStatus {
  Accepted
  Pending
  Denied
}

enum EnumPopularity {
  NewHome
  HotHome
  ShortSale
  Pending
  Sold
  OffMarket
}

enum EnumFavoriteCategory {
  NeedsRehab
  LightRenovation
}