// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider = "prisma-erd-generator"
// }

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id    String @id @default(cuid()) // matches up with the kinde user id
  email String @unique

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  favorites Favorite[]
  offers    Offer[]
  documents Document[]

  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?

  @@index([companyId])
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])

  @@unique([userId, propertyId])
  @@index([propertyId])
}

model Property {
  id      String  @id @default(cuid())
  url     String? @unique @default(cuid())
  heading String

  imgSrc     String
  imgWidth   Int?
  imgHeight  Int?
  imgAlt     String?
  cn         String?
  views      Int?
  popularity EnumPopularity?

  desc           String? @db.LongText
  matterportUrl  String?
  streetViewUrl  String?
  mapLocationUrl String? @db.LongText

  winNowPrice String?
  askPrice    String?
  arv         String?
  address1    String?
  address2    String?
  city        String?
  state       String?
  county      String?
  zip         String?
  beds        Int?
  baths       Int?
  sqft        Int?

  type      String?
  parking   String?
  yearBuilt Int?
  lotSize   Int?

  listedAt  String? // Timestamp when the property was listed
  createdAt DateTime @default(now()) // Timestamp when the property was created
  updatedAt DateTime @updatedAt // Timestamp when the property was updated

  favorites Favorite[]
  offers    Offer[]

  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?

  @@index([companyId])
}

model Offer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  winNowPrice   String?
  offerPrice    String? 
  emdAmount     String? 
  reqFinancing Boolean? @default(false)
  lenderName    String? 
  buyerName     String? 
  buyerCompany  String?  
  comments      String? @db.LongText

  documents Document[] 

  accepted      Boolean? @default(false)
  acceptedAt String?


  image         String?
  address1      String?
  address2      String?
  city          String?
  state         String?
  county        String?
  zip           String?
  dateSubmitted String?
  status        EnumStatus?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  property   Property? @relation(fields: [propertyId], references: [id])
  propertyId String?

  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?

  @@index([companyId])
  @@index([userId])
  @@index([propertyId])
}

model Company {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyName        String
  companyLogo        String?
  companyUrl         String?
  companyListingsUrl String?
  companyEmail       String
  companyPhone       String
  companyAddress1    String?
  companyAddress2    String?
  companyCity        String?
  companyState       String?
  companyZip         String?
  companyCountry     String?

  companyDescription String? @db.LongText

  companyFacebook  String?
  companyTwitter   String?
  companyInstagram String?
  companyLinkedin  String?
  companyYoutube   String?

  offers     Offer[]
  properties Property[]
  users      User[]
}

model Document {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  uploadStatus UploadStatus @default(PENDING)

  name String
  url  String
  key String

  offer   Offer @relation(fields: [offerId], references: [id])
  offerId String  @default(cuid())

  user User? @relation(fields: [userId], references: [id])
  userId String?

  @@index([offerId])
  @@index([userId])
}

enum EnumStatus {
  Accepted
  Pending
  Denied
}

enum EnumPopularity {
  NewHome
  HotHome
  ShortSale
  Pending
  Sold
  OffMarket
}

enum EnumFavoriteCategory {
  NeedsRehab
  LightRenovation
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}